[tool.poetry]
name = "narrator"
version = "0.1.0"
description = ""
authors = ["Nikos Atlas <nikatlas@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
azure-cognitiveservices-speech = "^1.32.1"
django = "^4.2.7"
django-postgres-extra = "^2.0.8"
django-rq = "^2.8.1"

openai = "^1.2.3"
rq = ">=1.4.3"
redis = ">3.0.0"
structlog = "^23.2.0"
django-redis = "^5.4.0"
djangorestframework = "^3.14.0"
markdown = "^3.5.1"
django-filter = "^23.3"
psycopg = "^3.1.18"
pylibmc = "^1.6.3"
holdup = "^4.0.0"
llama-index = "^0.10.18"
langchain = "^0.1.11"
beautifulsoup4 = "^4.12.3"
qdrant-client = "^1.8.0"


[tool.poetry.group.dev.dependencies]
bandit = "^1.7.1"
black = {version = "^22.3.0", allow-prereleases = true}
coverage = "^6.1.2"
coverage-badge = "^1.1.0"
darglint = "^1.8.1"
flake8 = "^6.0.0"
isort = {extras = ["colors"], version = "^5.10.1"}
mypy = "^1.5.0"
pytest-snapshot = "^0.9.0"
pytest-html = "^3.1.1"
pytest-cov = "^3.0.0"
pre-commit = "^2.15.0"
pydocstyle = "^6.1.1"
pyupgrade = "^2.29.1"
pytest = "^7.4.3"
pylint = "^2.11.1"
pylint-django = "^2.5.3"
pytest-django = "^4.5.2"
safety = "^1.10.3"
types-redis = "^4.6.0.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



[tool.black]
# https://github.com/psf/black
target-version = ["py38"]
line-length = 88
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 38
line_length = 88

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = 3.9
exclude = ["migrations"]
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__", "examples", "management"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
DJANGO_SETTINGS_MODULE = "narrator.settings"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.pylint.MAIN]
ignore = ["migrations", "tests", "examples"]
load-plugins = ["pylint_django"]

[tool.pylint."django foreign keys referenced by strings"]
django-settings-module = "narrator.settings"
DJANGO_SETTINGS_MODULE = "narrator.settings"

[tool.pylint."messages control"]
disable = [
  "missing-module-docstring", "missing-function-docstring", "unrecognized-option", "fixme",
  "too-few-public-methods", "c-extension-no-member", "too-many-instance-attributes",
  "too-many-arguments", "no-name-in-module", "imported-auth-user",
  "missing-class-docstring","too-many-ancestors", "duplicate-code"
]
good-names-rgxs = "^[_a-z][_a-z0-9]?$"

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]
omit = [
  "*/examples/*",
  "*/management/*",
  "*/urls.py",
]

[coverage.paths]
source = "narrator"

[coverage.run]
branch = true

[coverage.report]
fail_under = 80
show_missing = true
